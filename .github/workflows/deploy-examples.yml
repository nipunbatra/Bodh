name: Deploy Examples to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 'pre-release'

    - name: Setup TinyTeX for LaTeX support
      run: |
        echo "Installing TinyTeX for LaTeX Direct mode..."
        wget -qO- "https://yihui.org/tinytex/install-unx.sh" | sh
        echo "TinyTeX base installation completed"
        
        # Add TinyTeX to PATH
        export PATH="$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
        echo "$HOME/.TinyTeX/bin/x86_64-linux" >> $GITHUB_PATH
        
        # Install required LaTeX packages
        echo "Installing required LaTeX packages..."
        tlmgr install --verify-repo=none \
          beamer \
          pgf \
          xcolor \
          amsmath \
          amsfonts \
          amssymb \
          geometry \
          fancyhdr \
          graphicx \
          hyperref \
          enumitem \
          multicol \
          booktabs \
          array \
          longtable \
          colortbl \
          xetex \
          fontspec \
          unicode-math \
          lualatex-math \
          luaotfload \
          collection-fontsrecommended
        
        echo "TinyTeX setup completed successfully!"
        
        # Verify installation
        pdflatex --version
        echo "LaTeX installation verified"

    - name: Install dependencies
      run: |
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Installing Playwright dependencies..."
        playwright install-deps chromium
        echo "Installing Chromium browser..."
        playwright install chromium
        echo "All dependencies installed successfully!"
        
    - name: Run comprehensive test suite
      env:
        PATH: "$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
      run: |
        echo "Running Bodh test suite..."
        echo "LaTeX availability check..."
        pdflatex --version || echo "LaTeX not available for tests"
        python tests/test_bodh.py
        echo "All tests passed!"
        
    - name: Verify Playwright setup
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
      run: |
        echo "Testing Playwright setup..."
        # Start virtual display for headless browser  
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python -c "
        from playwright.sync_api import sync_playwright
        try:
            with sync_playwright() as p:
                browser_options = {
                    'headless': True,
                    'args': [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-gpu'
                    ]
                }
                browser = p.chromium.launch(**browser_options)
                page = browser.new_page()
                page.set_content('<h1>Test</h1>')
                browser.close()
            print('Playwright is working correctly')
        except Exception as e:
            print(f'Playwright test failed: {e}')
            raise
        "

    - name: Pre-generation check
      run: |
        echo "Checking repository structure before generation..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Examples directory:"
        ls -la examples/ || echo "No examples directory"
        echo "Showcase file:"
        ls -la examples/showcase.md || echo "No showcase.md file"
        echo "Themes directory:"
        ls -la themes/ || echo "No themes directory"
        echo "Config file:"
        ls -la config.py || echo "No config.py file"
        echo "Main script:"
        ls -la bodh.py || echo "No bodh.py file"

    - name: Generate examples
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
        PATH: "$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
      run: |
        echo "Starting example generation..."
        # Start virtual display for headless browser
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # Verify LaTeX is available
        echo "Verifying LaTeX availability..."
        pdflatex --version || echo "LaTeX not found in PATH"
        which pdflatex || echo "pdflatex not in PATH"
        
        # Generate examples with multi-mode support
        python generate_all_modes.py
        echo "Multi-mode example generation completed!"

    - name: Post-generation detailed check
      run: |
        echo "Checking results after generation..."
        echo "Generated examples directory structure:"
        find generated_examples/ -type f -exec ls -la {} \; 2>/dev/null || echo "No generated_examples directory or files"
        echo ""
        echo "Index.html content preview:"
        head -20 generated_examples/index.html 2>/dev/null || echo "No index.html found"
        echo ""
        echo "HTML + MathJax CDN examples:"
        ls -la generated_examples/html_mathjax/ 2>/dev/null || echo "No html_mathjax directory"
        echo ""
        echo "Local MathJax examples:"
        ls -la generated_examples/local_mathjax/ 2>/dev/null || echo "No local_mathjax directory"
        echo ""
        echo "LaTeX Direct examples:"
        ls -la generated_examples/latex_direct/ 2>/dev/null || echo "No latex_direct directory"
        echo ""
        echo "Performance reports:"
        ls -la generated_examples/performance_reports/ 2>/dev/null || echo "No performance_reports directory"
        echo ""
        echo "File sizes:"
        du -h generated_examples/* 2>/dev/null || echo "No generated_examples files to measure"
        echo ""
        echo "Total files generated:"
        find generated_examples/ -type f | wc -l 2>/dev/null || echo "0"

    - name: Build Quarto site
      run: |
        echo "Building Quarto documentation site..."
        quarto render
        echo "Quarto site built successfully!"
        
    - name: Copy examples to Quarto output
      run: |
        echo "Copying generated examples to Quarto site..."
        mkdir -p _site/generated_examples
        cp -r generated_examples/* _site/generated_examples/ 2>/dev/null || echo "No generated examples to copy"
        
        echo "Final verification:"
        ls -la _site/generated_examples/ || echo "No generated examples directory"
        echo "Multi-mode examples:"
        ls -la _site/generated_examples/html_mathjax/ || echo "No html_mathjax directory"
        ls -la _site/generated_examples/local_mathjax/ || echo "No local_mathjax directory"
        ls -la _site/generated_examples/latex_direct/ || echo "No latex_direct directory"
        echo "Total files in _site:"
        find _site/ -type f | wc -l

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Show Deployed URL
      run: echo "Visit your site at ${{ steps.deployment.outputs.page_url }}"
