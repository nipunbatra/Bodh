name: Deploy Examples to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 'pre-release'

    - name: Install dependencies
      run: |
        echo "üîß Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "üì¶ Installing requirements..."
        pip install -r requirements.txt
        echo "üé≠ Installing Playwright dependencies..."
        playwright install-deps chromium
        echo "üåê Installing Chromium browser..."
        playwright install chromium
        echo "‚úÖ All dependencies installed successfully!"
        
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running Bodh test suite..."
        python test_bodh.py
        echo "‚úÖ All tests passed!"
        
    - name: Verify Playwright setup
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
      run: |
        echo "üß™ Testing Playwright setup..."
        # Start virtual display for headless browser  
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python -c "
        from playwright.sync_api import sync_playwright
        try:
            with sync_playwright() as p:
                browser_options = {
                    'headless': True,
                    'args': [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-gpu'
                    ]
                }
                browser = p.chromium.launch(**browser_options)
                page = browser.new_page()
                page.set_content('<h1>Test</h1>')
                browser.close()
            print('‚úÖ Playwright is working correctly')
        except Exception as e:
            print(f'‚ùå Playwright test failed: {e}')
            raise
        "

    - name: Pre-generation check
      run: |
        echo "üîç Checking repository structure before generation..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Examples directory:"
        ls -la examples/ || echo "‚ùå No examples directory"
        echo "Showcase file:"
        ls -la examples/showcase.md || echo "‚ùå No showcase.md file"
        echo "Themes directory:"
        ls -la themes/ || echo "‚ùå No themes directory"
        echo "Config file:"
        ls -la config.py || echo "‚ùå No config.py file"
        echo "Main script:"
        ls -la bodh.py || echo "‚ùå No bodh.py file"

    - name: Generate examples
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
      run: |
        echo "üöÄ Starting example generation..."
        # Start virtual display for headless browser
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        python generate_examples.py
        echo "‚úÖ Example generation script completed!"

    - name: Post-generation detailed check
      run: |
        echo "üìä Checking results after generation..."
        echo "Docs directory structure:"
        find docs/ -type f -exec ls -la {} \; 2>/dev/null || echo "‚ùå No docs directory or files"
        echo ""
        echo "üìÑ Index.html content preview:"
        head -20 docs/index.html 2>/dev/null || echo "‚ùå No index.html found"
        echo ""
        echo "üñºÔ∏è Examples directory:"
        ls -la docs/examples/ 2>/dev/null || echo "‚ùå No examples directory"
        echo ""
        echo "üìë PDFs directory:"
        ls -la docs/pdfs/ 2>/dev/null || echo "‚ùå No pdfs directory"
        echo ""
        echo "üìè File sizes:"
        du -h docs/* 2>/dev/null || echo "‚ùå No docs files to measure"
        echo ""
        echo "üßÆ Total files generated:"
        find docs/ -type f | wc -l 2>/dev/null || echo "0"

    - name: Build Quarto site
      run: |
        echo "üìö Building Quarto documentation site..."
        quarto render
        echo "‚úÖ Quarto site built successfully!"
        
    - name: Copy examples to Quarto output
      run: |
        echo "üìÇ Copying generated examples to Quarto site..."
        mkdir -p _site/examples _site/pdfs
        cp -r docs/examples/* _site/examples/ 2>/dev/null || echo "‚ö†Ô∏è No examples to copy"
        cp -r docs/pdfs/* _site/pdfs/ 2>/dev/null || echo "‚ö†Ô∏è No PDFs to copy"
        
        echo "üìä Final verification:"
        ls -la _site/examples/ || echo "‚ùå No examples directory"
        ls -la _site/pdfs/ || echo "‚ùå No pdfs directory"
        echo "üßÆ Total files in _site:"
        find _site/ -type f | wc -l

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Show Deployed URL
      run: echo "Visit your site at ${{ steps.deployment.outputs.page_url }}"
