name: Deploy Examples to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Quarto
      uses: quarto-dev/quarto-actions/setup@v2
      with:
        version: 'pre-release'

    # TODO: Re-enable TinyTeX setup once LaTeX dependencies are resolved
    # - name: Setup TinyTeX for LaTeX support
    #   run: |
    #     echo "Installing TinyTeX for LaTeX Direct mode..."
    #     wget -qO- "https://yihui.org/tinytex/install-unx.sh" | sh
    #     echo "TinyTeX base installation completed"
    #     
    #     # Add TinyTeX to PATH
    #     export PATH="$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
    #     echo "$HOME/.TinyTeX/bin/x86_64-linux" >> $GITHUB_PATH
    #     
    #     # Install required LaTeX packages
    #     echo "Installing required LaTeX packages..."
    #     tlmgr install --verify-repo=none \
    #       beamer \
    #       pgf \
    #       xcolor \
    #       amsmath \
    #       amsfonts \
    #       amssymb \
    #       geometry \
    #       fancyhdr \
    #       graphicx \
    #       hyperref \
    #       enumitem \
    #       multicol \
    #       booktabs \
    #       array \
    #       longtable \
    #       colortbl \
    #       xetex \
    #       fontspec \
    #       unicode-math \
    #       lualatex-math \
    #       luaotfload \
    #       collection-fontsrecommended
    #     
    #     echo "TinyTeX setup completed successfully!"
    #     
    #     # Verify installation
    #     pdflatex --version
    #     echo "LaTeX installation verified"

    - name: Install dependencies
      run: |
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip
        echo "Installing requirements..."
        pip install -r requirements.txt
        echo "Installing Playwright dependencies..."
        playwright install-deps chromium
        echo "Installing Chromium browser..."
        playwright install chromium
        echo "All dependencies installed successfully!"
        
    - name: Run comprehensive test suite
      # env:
      #   PATH: "$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
      run: |
        echo "Running Bodh test suite..."
        # echo "LaTeX availability check..."
        # pdflatex --version || echo "LaTeX not available for tests"
        python tests/test_bodh.py
        echo "All tests passed!"
        
    - name: Verify Playwright setup
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
      run: |
        echo "Testing Playwright setup..."
        # Start virtual display for headless browser  
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python -c "
        from playwright.sync_api import sync_playwright
        try:
            with sync_playwright() as p:
                browser_options = {
                    'headless': True,
                    'args': [
                        '--no-sandbox',
                        '--disable-setuid-sandbox',
                        '--disable-dev-shm-usage',
                        '--disable-gpu'
                    ]
                }
                browser = p.chromium.launch(**browser_options)
                page = browser.new_page()
                page.set_content('<h1>Test</h1>')
                browser.close()
            print('Playwright is working correctly')
        except Exception as e:
            print(f'Playwright test failed: {e}')
            raise
        "

    - name: Pre-generation check
      run: |
        echo "Checking repository structure before generation..."
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Examples directory:"
        ls -la examples/ || echo "No examples directory"
        echo "Showcase file:"
        ls -la examples/showcase.md || echo "No showcase.md file"
        echo "Themes directory:"
        ls -la themes/ || echo "No themes directory"
        echo "Config file:"
        ls -la config.py || echo "No config.py file"
        echo "Main script:"
        ls -la bodh.py || echo "No bodh.py file"

    - name: Generate examples
      env:
        PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
        DISPLAY: ":99"
        # PATH: "$HOME/.TinyTeX/bin/x86_64-linux:$PATH"
      run: |
        echo "Starting example generation..."
        # Start virtual display for headless browser
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # TODO: Re-enable LaTeX verification once TinyTeX is working
        # echo "Verifying LaTeX availability..."
        # pdflatex --version || echo "LaTeX not found in PATH"
        # which pdflatex || echo "pdflatex not in PATH"
        
        # Generate ONLY the comprehensive gradient descent example with different renderers
        echo "Generating gradient descent example with multiple renderers..."
        python -c "
        from config import load_config
        from bodh import MarkdownToPDF
        import os
        import time
        
        # Single example file - the comprehensive gradient descent
        example_file = 'examples/gradient-descent-complete.md'
        config_file = 'configs/gradient-descent-complete.yml'
        
        # Create output directories
        os.makedirs('examples', exist_ok=True)
        os.makedirs('pdfs', exist_ok=True)
        
        print('🎯 Generating Gradient Descent - Same Content, Different Renderers')
        
        # 1. Playwright + MathJax CDN
        print('📄 Renderer 1: Playwright + MathJax CDN...')
        config = load_config(config_file)
        config.config['pdf']['engine'] = 'playwright'
        converter = MarkdownToPDF(config=config)
        os.environ['BODH_MATHJAX_MODE'] = 'cdn'
        
        start = time.time()
        html_output = converter.convert_to_html(example_file, 'examples/gradient-descent-mathjax-cdn.html')
        pdf_output = converter.convert_to_pdf(example_file, 'pdfs/gradient-descent-mathjax-cdn.pdf')
        cdn_time = time.time() - start
        print(f'   ✅ Generated: {html_output}, {pdf_output} ({cdn_time:.2f}s)')
        
        # 2. Playwright + Local MathJax  
        print('📄 Renderer 2: Playwright + Local MathJax...')
        os.environ['BODH_MATHJAX_MODE'] = 'local'
        
        start = time.time()
        html_output = converter.convert_to_html(example_file, 'examples/gradient-descent-local-mathjax.html')
        pdf_output = converter.convert_to_pdf(example_file, 'pdfs/gradient-descent-local-mathjax.pdf')
        local_time = time.time() - start
        print(f'   ✅ Generated: {html_output}, {pdf_output} ({local_time:.2f}s)')
        
        # 3. LaTeX Direct (will skip if LaTeX not available)
        print('📄 Renderer 3: LaTeX Direct...')
        config.config['pdf']['engine'] = 'latex'
        converter_latex = MarkdownToPDF(config=config)
        
        try:
            start = time.time()
            pdf_output = converter_latex.convert_to_pdf(example_file, 'pdfs/gradient-descent-latex.pdf')
            latex_time = time.time() - start
            print(f'   ✅ Generated: {pdf_output} ({latex_time:.2f}s)')
            print(f'   ⚡ Performance: LaTeX {local_time/latex_time:.1f}x faster than Local MathJax')
        except Exception as e:
            print(f'   ⚠️  LaTeX Direct skipped: {e}')
        
        print('\\n🎉 Single example, multiple renderers complete!')
        "
        echo "Gradient descent generation completed!"

    - name: Post-generation detailed check
      run: |
        echo "Checking gradient descent generation results..."
        echo "HTML examples (same content, different renderers):"
        ls -la examples/gradient-descent-* 2>/dev/null || echo "No HTML files generated"
        echo ""
        echo "PDF examples (same content, different renderers):"
        ls -la pdfs/gradient-descent-* 2>/dev/null || echo "No PDF files generated"
        echo ""
        echo "File sizes comparison:"
        du -h examples/gradient-descent-* 2>/dev/null || echo "No HTML files to measure"
        du -h pdfs/gradient-descent-* 2>/dev/null || echo "No PDF files to measure"

    - name: Build Quarto site
      run: |
        echo "Building Quarto documentation site..."
        quarto render
        echo "Quarto site built successfully!"
        
    - name: Copy gradient descent examples to Quarto output
      run: |
        echo "Copying gradient descent examples to Quarto site..."
        
        # Create clean directory structure for website
        mkdir -p _site/examples _site/pdfs
        
        # Copy ONLY the gradient descent examples (clean approach)
        if [ -d "examples" ]; then
          cp examples/gradient-descent-*.html _site/examples/ 2>/dev/null || echo "No gradient descent HTML files"
        fi
        
        if [ -d "pdfs" ]; then
          cp pdfs/gradient-descent-*.pdf _site/pdfs/ 2>/dev/null || echo "No gradient descent PDF files"
        fi
        
        echo "Final verification - Single Example, Multiple Renderers:"
        echo "HTML examples (same content, different renderers):"
        ls -la _site/examples/gradient-descent-* || echo "No gradient descent HTML files"
        echo "PDF examples (same content, different renderers):"
        ls -la _site/pdfs/gradient-descent-* || echo "No gradient descent PDF files"
        echo "Total files in _site:"
        find _site/ -type f | wc -l

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './_site'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Show Deployed URL
      run: echo "Visit your site at ${{ steps.deployment.outputs.page_url }}"
